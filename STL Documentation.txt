About STL : The Standard Template Library (STL) is a set of C++ template classes to provide common programming data structures and functions such as lists, stacks, arrays, etc. It is a library of container classes, algorithms, and iterators. It is a generalized library and so, its components are parameterized. A working knowledge of template classes is a prerequisite for working with STL.

About the project : The project done by team members is mind blowing. 

The Header Files : STL contains 4 types of header files 
1.Iterators
2.Containers
3.Algorithms
4.Functors
	In the project, we have covered the first 3.

Containers : 
1. vector.h :
	Functions of vector :
		T* begin() : This functions returns a pointer to the begining of array.[O(1)]
		T* end()   : This functions returns a pointer pointing to imaginary position after the last element.[O(1)]
		int size() : This functions returns the size of vector array in terms of number of elements.[O(1)]
		int capacity(): Returns the size of the storage space currently allocated to the vector expressed as number of elements.[O(1)]
		void resize(int): Resizes the container so that it contains ‘n’ elements.It will do nothing if 'size > n'.
		bool empty(): Returns whether the container is empty.
		void shrink_to_fit(): Reduces the capacity of the container to fit its size and destroys all elements beyond the capacity.
		void reserve(int): Requests that the vector capacity be at least enough to contain n elements.
		T* front() :Returns a reference to the first element in the vector[O(1)]
		T* back()  :Returns a reference to the last element in the vector[O(1)]
		void assign(int, T) : It assigns new value to the vector elements by replacing old ones.[O(n)]
		void push_back()    : It push the elements into a vector from the back.[O(1)]
		T pop_back()        : It is used to pop or remove elements from a vector from the back.[O(1)]
		T* insert(int, T)   : It inserts new element before the element at the specified position.[O(1)]
		T* insert(int, int, T): Inserts new element for the given range in the vector array.[O(range)]
		void erase(int)     : It is used to remove elements from a container from the specified position or range.[O(1)]
		void swap(vector<T>&) : It is used to swap the contents of one vector with another vector of same type. Sizes may differ.[O(n)]
		void clear()        : It is used to remove all the elements of the vector container.[O(1)]
		*void display() : This function is used to display the contents of vector.
		*int search(T)       : Performs binary search on the vector.[O(log(n))]
		
2. stack.h :
	Functions of stack :
		bool empty() : Returns whether the stack is empty – Time Complexity : O(1)
		int size() : Returns the size of the stack – Time Complexity : O(1)
		T topval() : Returns a reference to the top most element of the stack – Time Complexity : O(1)
		void push(T) : Adds the element ‘g’ at the top of the stack – Time Complexity : O(1)
		T pop() : Deletes the top most element of the stack – Time Complexity : O(1)
		*void insert(int, T) : This function inserts an element at certain position from the top.(Overriding the general ADT of stack)
		*int search(T) : Performs binary search on stack. 
3. queue.h : 
	Functions of queue :
		empty() : Returns whether the queue is empty.[O(1)]
		size()  : Returns the size of the queue.
		swap()  : Exchange the contents of two queues but the queues must be of same type, although sizes may differ.[O(n)]
		emplace() : Insert a new element into the queue container, the new element is added to the end of the queue.
		
		T* front() : front() function returns a reference to the first element of the queue.[O(1)]
		T* back()  : back() function returns a reference to the last element of the queue.[O(1)]
		void push(g) : This function adds the element ‘g’ at the end of the queue.[O(1)]
		T pop()   : This function deletes the first element of the queue.[O(1)]
